<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Market Size 市场估计问题]]></title>
    <url>%2F2018%2F03%2F19%2FMarket-Size-%E5%B8%82%E5%9C%BA%E4%BC%B0%E8%AE%A1%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Reference: market size 估算的一类问题应该怎么思考？ - 林梓默的回答 - 知乎 分类根据这个回答，分为两种问题。 第一种：问具体数字。电商一年卖多少本书？ 第二种：问服务的次数。北京多少加油站？ 公式 第一种问题考虑角度：供应/需求 （Supply/Demand)从需求角度：数量 = 消费人群 × 消费频率 × 单位时间 第二种考虑角度：数量 =（单位时间内）服务的总次数 ÷ 频 举例第一种举例：电商一年大约卖多少本书？公式：书总数量（本）= ①用户总数（人）× ②书数量（本/人/年）× 1（年） 消费人群：电商用户（未知） 消费频率：一位电商用户一年买书的数量（未知） 单位时间：一年（已知） 简单来看：假设电商只有1位用户，这位用户每月买1本书。那么在一年内（12个月），这位用户买了 12 × 1 = 12 本书。也就是说，电商这一年内卖出了12本书，因为它只有这一位用户。（很简单的情况） 分步： 电商有多少用户？① 电商用户总数 = 中国网民总数 x 电商网站的市场比例 中国网民总数 = 7亿 = 7 × 10^8 （人） 假设 电商网站的市场比例 = 30% 则 ① 电商用户总数 = 7 × 10^8 × 30% = 2.1 × 10^8 （人） 一位电商用户一年买书的数量？② 一位电商用户一年买书的数量 = 一位电商用户一月买书的数量 × 12 （月） 假设平均每人每月买0.5本，即两个月买一本（因为现在人们很少买书了╮(╯▽╰)╭） 则 ② 书数量（本/人/年）= 书数量（本/人/月）× 12（月/年）= 0.5 × 12 = 6（本/人/年） 单位时间 = 1 年 结论结合 ①②： 书总数量（本）= 用户总数（人）× 书数量（本/人/年）× 1（年） 书总数量（本）= 2.1 × 10^8 × 6 × 1 = 1.26 × 10^9 （本）即：电商一年大约卖12.6亿本书。 第二种举例：美国有多少加油站？公式：加油站总数（个） = ①（单位时间内）汽车加油总次数（次）÷ ②（单位时间内）每个加油站加油总次数（次/个）简单来看，一天24小时中，假设全国汽车总共加油了10次，每个加油站在这天内总共被使用了5次，那么全国有10 ÷ 5 = 2 个加油站。 分步：以下计算都是在单位时间内，单位时间是10天 单位时间内，全国总共加油多少次？① 汽车加油总次数（次）= 加油次数（次/辆）× 汽车总数（辆） 加油次数（次/辆）：假设一辆车平均10天加一次油。即单位时间 = 10天，加油次数 = 1（次/辆/10天） 汽车总数（辆） 以家庭为单位，汽车总数（辆）= 汽车数量（辆/家）× 家庭数量（家） 假设每家平均1.5辆车。 每5人算一个家庭。美国人口约为3亿，则家庭数量 = 美国人口（人）÷ 5（人/家）= 3 × 10^8 ÷ 5 = 6 × 10^7 （家） 则汽车总数（辆） = 汽车数量（辆/家）× 家庭数量（家）= 1.5 × 6 × 10^7 = 9 × 10^7（辆） 所以：① 汽车加油总次数（次）= 加油次数（次/辆）× 汽车总数（辆）= 1 × 9 × 10^7 = 9 × 10^7（次） 单位时间内，每个加油站加油总次数？意思就是，假设一个加油站里有一台加油机，这台加油机每1小时被使用一次，一天有24小时，那么它这天总共被使用了24次。这个加油站也就被使用了24次。注意使用概率：并不是全国所有加油站都有机会被使用。偏远地区使用频率很低。所以这里假设有每个加油站有80%的概率被光顾。 ② 每个加油站加油总次数（次/个）= 使用概率 × 加油机数量（台/个）× 使用次数（次/台/天） 假设使用概率为80% 假设每个加油站有6台加油机。 假设每3小时一台加油机被使用一次，则一天24小时中这台加油机被使用了8次（24/8=3） 所以 ② 每个加油站加油总次数（次/个）= 使用概率 × 加油机数量（台/个）× 使用次数（次/台/天）= 80% × 6 × 8 = 38.4（次/个/天） 单位时间内，每个加油站加油总次数为38.4 × 10（天）= 384 ≈ 400（次/个） 结论结合 ①②：加油站总数（个） = ①（单位时间内）汽车加油总次数（次）÷ ②（单位时间内）每个加油站加油总次数（次/个）加油站总数（个）= 9 × 10^7 ÷ 400 = 2.25 × 10^5 = 225,000（个）即：美国大约有22.5万个加油站。​网上查到资料说美国大概有168,000个加油站（2004），数量级是一致的。]]></content>
      <categories>
        <category>Case Study</category>
      </categories>
      <tags>
        <tag>Market Size</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Common Commands]]></title>
    <url>%2F2018%2F03%2F19%2FHexo-Common-Commands%2F</url>
    <content type="text"><![CDATA[Create a new post 创建一个新的文章$ hexo new &quot;new post&quot; View site static 发布前预览$ hexo s Clean cache file 清理缓存（如果修改了格式）$ hexo clean Generate and deploy files 发布hexo g -d]]></content>
  </entry>
  <entry>
    <title><![CDATA[Scanner Class in Java]]></title>
    <url>%2F2018%2F03%2F18%2FDay0%2F</url>
    <content type="text"><![CDATA[Reference: Day 0: Hello, World.Read from stdin:1Scanner scan = new Scanner(System.in); Read next:1234scan.next(); // returns the next token of inputscan.hasNext(); // returns true if there is another token of input (false otherwise)scan.nextLine() // returns the next LINE of inputscan.hasNextLine(); // returns true if there is another line of input When finish reading, close it to avoid a resource leak.1scan.close(); Example1234Scanner scan = new Scanner(System.in); // open scannerString s = scan.next(); // read the next token and save it to 's'scan.close(); // close scannerSystem.out.println(s); // print 's' to System.out, followed by a new line ​]]></content>
      <categories>
        <category>30 Days of Code</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
